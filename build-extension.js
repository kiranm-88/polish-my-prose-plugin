
import { build } from 'vite';
import fs from 'fs';
import path from 'path';

async function buildExtension() {
  console.log('🚀 Building Chrome extension...');
  
  // Clean the output directory first
  if (fs.existsSync('dist-extension')) {
    fs.rmSync('dist-extension', { recursive: true, force: true });
    console.log('🧹 Cleaned dist-extension directory');
  }
  
  try {
    // Build with Vite - very simple config
    await build({
      configFile: false, // Don't use vite.config.ts
      build: {
        outDir: 'dist-extension',
        rollupOptions: {
          input: 'index-extension.html',
          output: {
            entryFileNames: 'assets/[name].js',
            chunkFileNames: 'assets/[name].js',
            assetFileNames: 'assets/[name].[ext]'
          }
        }
      },
      define: {
        'process.env.NODE_ENV': '"production"'
      }
    });
    
    console.log('✅ Vite build completed successfully');
    
    // List what Vite actually generated
    console.log('\n📋 Files generated by Vite:');
    function listFiles(dir, prefix = '') {
      const items = fs.readdirSync(dir);
      items.forEach(item => {
        const fullPath = path.join(dir, item);
        const stats = fs.statSync(fullPath);
        if (stats.isDirectory()) {
          console.log(`${prefix}📁 ${item}/`);
          listFiles(fullPath, prefix + '  ');
        } else {
          console.log(`${prefix}📄 ${item} (${stats.size} bytes)`);
        }
      });
    }
    listFiles('dist-extension');
    
    // Copy extension-specific files
    const extensionFiles = [
      { src: 'public/manifest.json', dest: 'manifest.json' },
      { src: 'public/content.js', dest: 'content.js' }
    ];
    
    for (const file of extensionFiles) {
      if (fs.existsSync(file.src)) {
        fs.copyFileSync(file.src, path.join('dist-extension', file.dest));
        console.log(`✅ Copied ${file.dest}`);
      } else {
        console.warn(`⚠️  ${file.src} not found`);
      }
    }
    
    // Check if index.html was generated correctly
    const indexPath = path.join('dist-extension', 'index.html');
    if (fs.existsSync(indexPath)) {
      const content = fs.readFileSync(indexPath, 'utf8');
      console.log(`\n✅ index.html exists (${content.length} characters)`);
      
      // Show the first few lines to verify content
      const lines = content.split('\n').slice(0, 10);
      console.log('📄 Content preview:');
      lines.forEach((line, i) => console.log(`${i + 1}: ${line}`));
    } else {
      console.error('❌ CRITICAL: index.html was not generated!');
      
      // Check if there's an HTML file with a different name
      const files = fs.readdirSync('dist-extension');
      const htmlFiles = files.filter(f => f.endsWith('.html'));
      console.log('🔍 HTML files found:', htmlFiles);
      
      if (htmlFiles.length > 0) {
        console.log(`🔄 Renaming ${htmlFiles[0]} to index.html`);
        fs.renameSync(
          path.join('dist-extension', htmlFiles[0]),
          path.join('dist-extension', 'index.html')
        );
      }
    }
    
    console.log('\n🎉 Extension build complete!');
    console.log('\n📋 Installation steps:');
    console.log('1. Open Chrome → chrome://extensions/');
    console.log('2. Enable "Developer mode"');
    console.log('3. Click "Load unpacked"');
    console.log('4. Select the dist-extension folder');
    console.log('5. Click the extension icon in the toolbar');
    
  } catch (error) {
    console.error('❌ Build failed:', error.message);
    console.error('Stack:', error.stack);
    throw error;
  }
}

buildExtension().catch(error => {
  console.error('💥 Fatal error:', error);
  process.exit(1);
});
